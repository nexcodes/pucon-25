generator client {
    provider = "prisma-client-js"
    // output   = "/node_modules/@prisma/client/default"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Schema generated by better auth
model User {
    id            String   @id @default(cuid())
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime

    sessions      Session[]
    accounts      Account[]
    memberships   CommunityMember[] // User's community memberships
    personalGoals PersonalGoal[] // User's personal goals
    activityLogs  ActivityLog[] // User's carbon footprint activities
    posts         ActivityPost[] // User's activity feed posts
    CommunityGoal CommunityGoal[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    role      Role     @default(USER)
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

// Community model
model Community {
    id          String            @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime
    updatedAt   DateTime
    members     CommunityMember[] // Members of the community
    goals       CommunityGoal[] // Community-wide goals
    posts       ActivityPost[] // Community activity feed posts

    @@map("community")
}

// Community membership model
model CommunityMember {
    id          String    @id @default(cuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    communityId String
    community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
    role        Role      @default(USER)
    joinedAt    DateTime
    updatedAt   DateTime

    @@unique([userId, communityId])
    @@map("community_member")
}

// Community goals model
model CommunityGoal {
    id          String    @id @default(cuid())
    communityId String
    community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
    title       String
    description String?
    targetValue Float // e.g., tons of CO2 to reduce
    progress    Float     @default(0.0) // Current progress towards goal
    createdAt   DateTime
    updatedAt   DateTime
    createdById String
    createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

    @@map("community_goal")
}

// Personal goals model
model PersonalGoal {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String?
    targetValue Float // e.g., tons of CO2 to reduce
    progress    Float    @default(0.0) // Current progress towards goal
    createdAt   DateTime
    updatedAt   DateTime

    @@map("personal_goal")
}

// Activity log for carbon footprint reduction
model ActivityLog {
    id           String   @id @default(cuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    description  String
    carbonSaved  Float // Amount of CO2 saved (in tons)
    activityDate DateTime
    createdAt    DateTime
    updatedAt    DateTime

    @@map("activity_log")
}

// Activity feed posts
model ActivityPost {
    id          String    @id @default(cuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    communityId String
    community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
    content     String // Text content of the post (tips, resources, etc.)
    createdAt   DateTime
    updatedAt   DateTime

    @@map("activity_post")
}

// ENUMS

enum Role {
    USER
    COMMUNITY_LEADER
    ADMIN
}
